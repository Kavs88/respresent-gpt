# respresent-gpt.py (Final, Polished Version)

import streamlit as st
import openai
from pptx import Presentation
from io import BytesIO

# --- UTILITY FUNCTION ---
def load_css(file_name):
    """Function to load and inject a local CSS file."""
    with open(file_name) as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

# --- CORE LOGIC ---
def generate_presentation_content(topic, num_slides, additional_instructions):
    """
    Generates presentation content using OpenAI's API.
    The function signature is the same, but the prompt is greatly improved for quality.
    """
    # This new prompt is specifically engineered to create a talent showcase.
    prompt = f"""
    You are an expert creative director for a top-tier talent representation agency.
    Your task is to generate the text content for a compelling presentation.

    **Talent/Concept to Showcase:** "{topic}"
    **Total Number of Slides:** {num_slides}
    **Additional Instructions from Agent:** {additional_instructions if additional_instructions else "Focus on their unique strengths, recent successes, and marketability."}

    **RULES:**
    1.  The first slide must be a powerful Title Slide.
    2.  The last slide must be a "Contact & Next Steps" slide with placeholder agency info.
    3.  For all other slides, create a compelling Title and 3-4 concise, impactful bullet points.
    4.  The tone must be professional, confident, and exclusive. Avoid generic phrases.

    Structure your entire response strictly like this, with no extra text before or after:

    Slide 1: [Title]
    - [Bullet Point 1]

    Slide 2: [Title]
    - [Bullet Point 1]
    - [Bullet Point 2]
    """
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4", # Using GPT-4 is recommended for best-in-class results
            messages=[
                {"role": "system", "content": "You are a creative director for a top talent agency."},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message['content'].strip()
    except Exception as e:
        st.error(f"An error occurred with the OpenAI API: {e}")
        return None

def create_presentation(content):
    """
    This core function is IDENTICAL to your working version.
    It remains untouched to guarantee functionality is not broken.
    """
    prs = Presentation()
    slides_content = content.split('Slide ')[1:]

    for slide_content in slides_content:
        try:
            lines = slide_content.strip().split('\n')
            title = lines[0].split(':', 1)[1].strip()
            body_points = [line.strip().lstrip('- ') for line in lines[1:] if line.strip()]

            slide_layout = prs.slide_layouts[1] # 'Title and Content'
            slide = prs.slides.add_slide(slide_layout)

            slide.shapes.title.text = title
            content_placeholder = slide.placeholders[1]
            tf = content_placeholder.text_frame
            tf.clear()

            for point in body_points:
                p = tf.add_paragraph()
                p.text = point
                p.level = 0
        except IndexError:
            st.warning(f"Skipping a malformed slide section generated by the AI.")
            continue
            
    bio = BytesIO()
    prs.save(bio)
    bio.seek(0)
    return bio

# --- PAGE CONFIGURATION & STYLING ---
st.set_page_config(page_title="Represent GPT", layout="wide")
load_css('style.css') # Apply our custom theme

# Initialize session state for a robust user experience
if 'generated_presentation' not in st.session_state:
    st.session_state.generated_presentation = None
if 'file_name' not in st.session_state:
    st.session_state.file_name = ""

# --- SIDEBAR ("Control Room") ---
with st.sidebar:
    st.title("Represent GPT")
    st.markdown("AI-Powered Talent Showcases")
    st.markdown("---")
    
    try:
        openai.api_key = st.secrets["OPENAI_API_KEY"]
    except:
        st.error("API Key not found. Please add it to your secrets.toml file.")

    st.header("1. Define Your Showcase")
    topic = st.text_input("Talent or Concept", placeholder="e.g., Actor Jane Doe's Versatility")
    num_slides = st.number_input("Number of Slides", min_value=3, max_value=15, value=7)
    additional_instructions = st.text_area("Specific Instructions", placeholder="e.g., Emphasize their recent award win and suitability for sci-fi roles.")
    
    st.markdown("---")
    generate_button = st.button("âœ¨ Generate Presentation", use_container_width=True)

# --- MAIN PAGE ("The Stage") ---
st.header("Create a Stunning Talent Showcase")
st.markdown(
    "Fill in the details in the sidebar to generate a professional PowerPoint presentation. "
    "The final deck will be available for download here once generated."
)
st.markdown("---")

# --- LOGIC & OUTPUT ---
if generate_button:
    if not openai.api_key:
        st.error("Cannot generate. Please ensure your OpenAI API key is configured correctly.")
    elif not topic:
        st.warning("Please enter a Talent or Concept to showcase.")
    else:
        with st.spinner("Crafting your presentation..."):
            content = generate_presentation_content(topic, num_slides, additional_instructions)
            if content:
                presentation_file = create_presentation(content)
                # Store the result in session state to make it persistent
                st.session_state.generated_presentation = presentation_file
                st.session_state.file_name = f"{topic.replace(' ', '_').lower()}_showcase.pptx"

# Display download button if a presentation has been generated
if st.session_state.generated_presentation:
    st.success("Your presentation is ready!")
    st.download_button(
        label="ðŸ“¥ Download Presentation (.pptx)",
        data=st.session_state.generated_presentation,
        file_name=st.session_state.file_name,
        mime="application/vnd.openxmlformats-officedocument.presentationml.presentation",
        use_container_width=False, 
    ) 